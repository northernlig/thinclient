{"version":3,"sources":["src/app.js","src/environment.js","src/main.js","src/messages.js","src/no-selection.js","src/object-view.js","src/property-view.js","src/utility.js","src/web-api.js","src/resources/index.js","src/resources/elements/connection-selector.js","src/resources/elements/loading-indicator.js","src/resources/value-converters/parent-path.js"],"names":["App","api","configureRouter","config","router","title","map","route","moduleId","name","debug","testing","configure","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","OnObjectUpdated","object","SelectObject","path","OnConnect","hostname","NoSelection","ea","message","activate","publish","ObjectView","objects","select","subscribe","msg","selected","connect","currentPath","parentPath","getParentPath","pathParts","split","objectName","length","getChildObjects","getChildPath","childObject","i","PropertyView","params","routeConfig","getObjectProperties","originalObject","save","saveObject","canDeactivate","result","confirm","isRequesting","areEqual","cloneObject","obj1","obj2","Object","keys","every","key","hasOwnProperty","JSON","parse","stringify","channels","prop1","prop2","prop3","devices","WebAPI","Promise","results","channel","device","resolve","filter","x","modifiedObject","instance","found","index","indexOf","globalResources","ConnectionSelector","validHostname","Connect","OnHostnameChanged","trim","nprogress","LoadingIndicator","loadingChanged","newValue","done","ParentPathValueConverter","toView"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {inject} from 'aurelia-framework';\nimport {WebAPI} from './web-api';\n\n@inject(WebAPI)\nexport class App {\n  constructor(api) {\n    this.api = api;\n  }\n\n  configureRouter(config, router) {\n    config.title = 'Thin Client';\n    config.map([\n      { route: ['','project'],    moduleId: 'no-selection',  name:'project'},\n      { route: 'project/*path',  moduleId: 'property-view',  name:'project'  }\n    ]);\n\n    this.router = router;\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export class OnObjectUpdated {\n  constructor(object) {\n    this.object = object;\n  }\n}\n\nexport class SelectObject {\n  constructor(path) {\n    this.path = path;\n  }\n}\n\nexport class OnConnect {\n  constructor (hostname) {\n    this.hostname = hostname;\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {SelectObject} from './messages';\n\n@inject(EventAggregator)\nexport class NoSelection {\n  constructor(ea) {\n    this.message = \"Please Select an Object.\";\n    this.ea = ea;\n  }\n\n  activate (){\n    // Need to reset everything when this is activated.\n    // Causes object view to select the root node.\n    this.ea.publish(new SelectObject(\"\"));\n  }\n}\n","import {EventAggregator} from 'aurelia-event-aggregator';\nimport {WebAPI} from './web-api';\nimport {OnObjectUpdated, SelectObject, OnConnect} from './messages';\nimport {inject} from 'aurelia-framework';\n\n@inject(WebAPI, EventAggregator)\nexport class ObjectView {\n  constructor(api, ea) {\n    this.api = api;\n    this.objects = [];\n\n    // Always begin by selecting nothing\n    this.select (\"\");\n\n    // Select object events\n    ea.subscribe(SelectObject, msg => {\n      this.select(msg.path)\n    });\n\n    // Object updated events\n    ea.subscribe(OnObjectUpdated, msg => {\n      this.selected = msg.object.name;\n    });\n\n    // Connect to server events\n    ea.subscribe(OnConnect, msg => {\n      api.connect (msg.hostname);\n\n      // Select nothing\n      this.select (\"\")\n    });\n  }\n\n  // Update view: occurs upon selection.\n  // Path format is: /collectionName/collectionItem/collectionName/etc...\n  select(path) {\n    this.currentPath = path;\n    this.parentPath = this.getParentPath ();\n\n    // Update the name of the parent object\n    if (path == \"\") {\n      // Empty path should show project static text (there is no object to represent this parent)\n      this.selected = \"Project\";\n    }\n    else {\n      // Name is the part of the path after the '/'.\n      // Todo: It's possible to have a path with an ending '/'.  Example: objects/Channel1/\n      // The algorithm would fail for this.  Not bother to fix that now though..\n      let pathParts = path.split(\"/\");\n      let objectName = pathParts[pathParts.length-1];\n      this.selected = objectName;\n    }\n\n    // Update the select nodes children\n    // ToDo: Need to genericize this to grab channels or devices\n    this.api.getChildObjects(path).then(objects => this.objects = objects);\n\n    return true;\n  }\n\n  getChildPath (childObject) {\n    // ToDo: Need to use information from REST to determine what the collection names should\n    // actually be.  Should probably do this as  a class function attached to childObject... i.e. childObject.GetPath ()\n    if (this.currentPath == 0) {// Channels\n      return 'channels/' + childObject.name;\n    }\n    else {\n      return this.currentPath + '/devices/' + childObject.name;\n    }\n  }\n\n  getParentPath (){\n    let pathParts = this.currentPath.split ('/');\n    if (pathParts.length == 1 || pathParts.length == 2){  // Project selected or channel selected\n      return \"\";\n    }\n\n    // New path is everything but the last two parts.  This should work N deep\n    let parentPath = pathParts[0];  // Can't include channels because of this.\n    for (let i = 1; i < pathParts.length - 2; i++){\n      parentPath += '/' + pathParts[i];\n    }\n\n    return parentPath;\n  }\n}\n","\nimport {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {WebAPI} from './web-api';\nimport {OnObjectUpdated, SelectObject} from './messages';\nimport {areEqual, cloneObject} from './utility';\n\n@inject(WebAPI, EventAggregator)\nexport class PropertyView {\n  constructor(api, ea){\n    this.api = api;\n    this.ea = ea;\n  }\n\n  activate(params, routeConfig) {\n    this.routeConfig = routeConfig;\n\n    // Initialize properties\n    // ToDo: Display generic object properties.  Currently, we assume 3 static properties and statically code their names.\n    return this.api.getObjectProperties(params.path).then(object => {\n      // Keep track of object being edited\n      this.object = object;\n      this.originalObject = cloneObject(object);\n\n      this.ea.publish(new SelectObject(params.path));\n    });\n  }\n\n  get canSave() {\n    return  !areEqual (this.originalObject, this.object) && !this.api.isRequesting;\n  }\n\n  save() {\n    this.api.saveObject(this.originalObject, this.object).then(object => {\n      // Update locally cached object\n      this.object = object;\n      this.originalObject = cloneObject(object);\n\n      this.ea.publish(new OnObjectUpdated(this.object));\n    });\n  }\n\n  canDeactivate() {\n    // If unsaved changes, give user the opportunity to not change views\n    if (!areEqual(this.originalObject, this.object)){\n      let result = confirm('You have unsaved changes. Are you sure you wish to leave?');\n      return result;\n    }\n\n    return true;\n  }\n}\n\n","export function areEqual(obj1, obj2) {\n\treturn Object.keys(obj1).every((key) => obj2.hasOwnProperty(key) && (obj1[key] === obj2[key]));\n};\n\n// Clone hack.  Should probably be a member function of object.\n// JSON is probably not the best way to do this because it prevents adding functions to object.  Stringify can't convert\n// them.\nexport function cloneObject (object) {\n  return JSON.parse(JSON.stringify(object));\n}\n","import {cloneObject} from './utility';\n\n// Fake channels\nlet channels = [\n  {\n    name:'Channel1',\n    prop1:'localhost',\n    prop2:'0',\n    prop3:'222'\n  },\n  {\n    name:'Channel2',\n    prop1:'true',\n    prop2:'55',\n    prop3:'read-only'\n  },\n  {\n    name:'Channel3',\n    prop1:'192.168.1.1',\n    prop2:'yes',\n    prop3:'33'\n  },\n  {\n    name:'Channel4',\n    prop1:'255.255.255.255',\n    prop2:'2',\n    prop3:'33'\n  },\n  {\n    name:'Channel5',\n    prop1:'localhost',\n    prop2:'35',\n    prop3:'23'\n  }\n];\n\n// Fake devices: normally each channel has different devices, but we just want a pretty hack.\nlet devices = [\n  {\n    name:'Device1',\n    prop1:'localhost',\n    prop2:'0',\n    prop3:'222'\n  },\n  {\n    name:'Device2',\n    prop1:'true',\n    prop2:'55',\n    prop3:'read-only'\n  }\n];\n\nexport class WebAPI {\n  isRequesting = false;\n  hostname = \"\";\n\n  connect (hostname) {\n    // In rest, connections are stateless.  So, just keep track of the current IP rather than communicating with server.\n    this.hostname = hostname;\n  }\n\n  // Given the path to a parent, return its children\n  // Without in memory, this would just be a rest call, and JSON conversion code.\n  getChildObjects(path) {\n    this.isRequesting = true;\n    return new Promise(resolve => {\n      let results = [];\n\n      // Hack: this makes it look like we're disconnected unless someone has connected with localhost.\n      if (this.hostname != 'localhost'){\n        return [];\n      }\n\n      // Hack: return either devices or channels depending on the path\n      let pathParts = path.split ('/');\n      if (pathParts.length == 1) {\n        results = channels.map(channel => {\n          return cloneObject(channel)\n        });\n      }\n      else if (pathParts.length==2){\n        results = devices.map(device => {\n          return cloneObject(device)\n        });\n      }\n\n      resolve(results);\n      this.isRequesting = false;\n    });\n  }\n\n  getObjectProperties(path) {\n    this.isRequesting = true;\n    return new Promise(resolve => {\n      // Hack: return device/channel properties depending on path.\n      let pathParts = path.split (\"/\");\n      let name = pathParts [pathParts.length-1];\n\n      let object;\n      if (pathParts.length == 2) {\n        object = channels.filter(x => x.name == name)[0];\n      }\n      else {\n        object = devices.filter(x => x.name == name)[0];\n      }\n\n      resolve(cloneObject(object));\n      this.isRequesting = false;\n    });\n  }\n\n  saveObject(originalObject, modifiedObject){\n    // ToDo: Need to add device name saving support.  Requires path implementation.  Not bothering to do this\n    // because real REST client implementation would rewrite this into a simple PUT call given a path and modified object.\n    this.isRequesting = true;\n    return new Promise(resolve => {\n      let instance = cloneObject(modifiedObject);\n\n      // Duplicate names aren't allowed, but that's enforced by kepserver, so no need to enforce here.\n      let found = channels.filter(x => x.name == originalObject.name)[0];\n\n      if(found){\n        let index = channels.indexOf(found);\n        channels[index] = instance;\n      }\n\n      this.isRequesting = false;\n      resolve(instance);\n    });\n  }\n}\n","export function configure(config) {\n  config.globalResources('./elements/loading-indicator', './elements/connection-selector');\n}\n","import {EventAggregator} from 'aurelia-event-aggregator';\nimport {OnConnect} from 'messages';\nimport {inject} from 'aurelia-framework';\n\n@inject(EventAggregator)\nexport class ConnectionSelector {\n  constructor(ea) {\n    this.ea = ea;\n    this.hostname = \"255.255.255.255\";\n    this.validHostname = false;\n  }\n\n  // Attempt to connect to Kepserver.  Only localhost accepted currently...\n  Connect() {\n    this.ea.publish(new OnConnect(this.hostname));\n  }\n\n  // Validate hostname... hack: only valid for localhost\n  OnHostnameChanged () {\n    if (this.hostname.trim() === \"localhost\") {\n      this.validHostname = true;\n    }\n    else {\n      this.validHostname = false;\n    }\n  }\n}\n","import * as nprogress from 'nprogress';\nimport {bindable, noView} from 'aurelia-framework';\n\n@noView(['nprogress/nprogress.css'])\nexport class LoadingIndicator {\n  @bindable loading = false;\n\n  loadingChanged(newValue) {\n    if (newValue) {\n      nprogress.start();\n    } else {\n      nprogress.done();\n    }\n  }\n}\n","/**\n * Created by medwards on 5/30/2017.\n */\nexport class ParentPathValueConverter {\n  toView(currentPath) {\n    // ToDo: Get this working so object-view.js doesn't need to maintain both parentPath and currentPath local variables.\n    // Readme: Dead code.  I wanted to use this in object-view.html in place of what's there, the currentPath variable bind.\n    // I got it working for the most part, except for within the 'route-href' syntax.  It can't seem to parse it,\n    // I must be missing something.  Works fine when i use it elsewhere in the doc.\n\n    let pathParts = currentPath.split ('/');\n    if (pathParts.length == 1 || pathParts.length == 2){  // Project selected or channel selected\n      return \"\";\n    }\n\n    // New path is everything but the last two parts.  This should work N deep\n    let parentPath = pathParts[0];  // Can't include channels because of this.\n    for (let i = 1; i < pathParts.length - 2; i++){\n      parentPath += '/' + pathParts[i];\n    }\n\n    return parentPath;\n  }\n}\n"],"sourceRoot":".."}